{"version":3,"sources":["lib/ScatterPlot.jsx","lib/PlottingUtils.js","lib/index.js","lib/ScatterPlotBundle.jsx","index.js"],"names":["ScatterPlot","props","drawScatterPlot","ctx","data","dataPointColors","visibleXRange","minY","maxY","xAxisKey","yAxisKey","undefined","clearRect","canvasW","canvasH","forEach","dataArr","i","length","d","domY","width","minX","maxX","domX","circle","getCircle","height","dataY","toDomYCoord_Linear","drawImage","dataPointColorCanvasCache","this","scatterPlotCanvas","refs","scatterPlotCtx","getContext","prevProps","prevState","nextProps","nextState","isEqual","state","x0","y0","x1","y1","r","color","w","h","beginPath","moveTo","quadraticCurveTo","lineTo","closePath","fillStyle","fill","canvas","document","createElement","arc","Math","PI","className","ref","style","position","Component","ScatterPlotBundle","filteredData","filter","getRandomColor","floor","random","App","generateDummyData","xRange","yRange","dataFreq","min","max","dummyData","curX","push","time","value","currentOverlay","dataSetCount","setState","PureComponent","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0b508d95.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport isEqual from \"lodash.isequal\";\nimport { toDomYCoord_Linear, toDomXCoord_Linear } from \"./PlottingUtils\";\n\nclass ScatterPlot extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasW = this.props.width;\n    this.canvasH = this.props.height;\n    // {color: canvas}\n    this.dataPointColorCanvasCache = {};\n  }\n\n  componentDidMount() {\n    this.scatterPlotCanvas = this.refs.scatterPlotCanvas;\n    this.scatterPlotCtx = this.scatterPlotCanvas.getContext(\"2d\");\n    this.drawScatterPlot(this.scatterPlotCtx);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.drawScatterPlot(this.scatterPlotCtx);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return !isEqual(this.props, nextProps) || this.state !== nextState;\n  }\n\n  roundRect(ctx, x0, y0, x1, y1, r, color) {\n    var w = x1 - x0;\n    var h = y1 - y0;\n    if (r > w / 2) r = w / 2;\n    if (r > h / 2) r = h / 2;\n    ctx.beginPath();\n    ctx.moveTo(x1 - r, y0);\n    ctx.quadraticCurveTo(x1, y0, x1, y0 + r);\n    ctx.lineTo(x1, y1 - r);\n    ctx.quadraticCurveTo(x1, y1, x1 - r, y1);\n    ctx.lineTo(x0 + r, y1);\n    ctx.quadraticCurveTo(x0, y1, x0, y1 - r);\n    ctx.lineTo(x0, y0 + r);\n    ctx.quadraticCurveTo(x0, y0, x0 + r, y0);\n    ctx.closePath();\n    ctx.fillStyle = color;\n    ctx.fill();\n  }\n\n  drawScatterPlot = ctx => {\n    let {\n      data,\n      dataPointColors,\n      visibleXRange,\n      minY,\n      maxY,\n      xAxisKey,\n      yAxisKey\n    } = this.props;\n\n    if (data === undefined) {\n      return;\n    }\n\n    ctx.clearRect(0, 0, this.canvasW, this.canvasH);\n\n    data.forEach((dataArr, i) => {\n      if (dataArr.length > 0) {\n        dataArr.forEach(d => {\n          let domY,\n            domX = toDomXCoord_Linear(\n              this.canvasW,\n              visibleXRange[0],\n              visibleXRange[1],\n              d[xAxisKey]\n            );\n\n          let circle = this.getCircle(dataPointColors[i]);\n\n          domY = toDomYCoord_Linear(this.canvasH, minY, maxY, d[yAxisKey]);\n\n          ctx.drawImage(circle, domX, domY);\n        });\n      }\n    });\n  };\n\n  getCircle(color) {\n    if (this.dataPointColorCanvasCache[color] === undefined) {\n      let canvas = document.createElement(\"canvas\");\n      canvas.width = 6;\n      canvas.height = 6;\n      let ctx = canvas.getContext(\"2d\");\n      ctx.arc(3, 3, 2, 0, 2 * Math.PI);\n      ctx.fillStyle = color;\n      ctx.fill();\n      this.dataPointColorCanvasCache[color] = canvas;\n    }\n    return this.dataPointColorCanvasCache[color];\n  }\n\n  render() {\n    const styles = {\n      scatterPlotCanvas: {\n        position: \"absolute\"\n      }\n    };\n\n    return (\n      <canvas\n        className=\"scatter-plot-canvas\"\n        ref=\"scatterPlotCanvas\"\n        width={this.canvasW}\n        height={this.canvasH}\n        style={styles.scatterPlotCanvas}\n      />\n    );\n  }\n}\n\nexport default ScatterPlot;\n","//height: canvas px\n// minY: lowest value\n// maxY: highest value\n// dataY: value\nexport function toDomYCoord_Linear(height, minY, maxY, dataY) {\n    return height - (dataY - minY) / ((maxY - minY) / height);\n}\n\nexport function fromDomYCoord_Linear(height, minY, maxY, domY) {\n    return (height - domY) * ((maxY - minY) / height) + minY;\n}\n\nexport function toDomXCoord_Linear(width, minX, maxX, dataX) {\n    return (dataX - minX) / ((maxX - minX) / width);\n}\n\nexport function fromDomXCoord_Linear(width, minX, maxX, domX) {\n    return domX * ((maxX - minX) / width) + minX;\n}","import ScatterPlotBundle from \"./ScatterPlotBundle\";\nexport default ScatterPlotBundle;","import React, { Component } from \"react\";\nimport ScatterPlot from \"./ScatterPlot\";\nimport isEqual from \"lodash.isequal\";\n\nclass ScatterPlotBundle extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return !isEqual(this.props, nextProps) || this.state !== nextState;\n  }\n\n  render() {\n    const {\n      data,\n      dataPointColors,\n      visibleXRange,\n      width,\n      height,\n      minY,\n      maxY,\n      xAxisKey,\n      yAxisKey\n    } = this.props;\n\n    if (data.length < 1 || data === undefined) {\n      return null;\n    }\n\n    let filteredData = [];\n    data.forEach((dataArr, i) => {\n      filteredData[i] = dataArr.filter(d => {\n        return d[xAxisKey] >= visibleXRange[0] && d[xAxisKey] <= visibleXRange[1];\n      });\n    });\n\n    return (\n      <ScatterPlot\n        data={filteredData}\n        dataPointColors={dataPointColors}\n        visibleXRange={visibleXRange}\n        width={width}\n        height={height}\n        minY={minY}\n        maxY={maxY}\n        xAxisKey={xAxisKey}\n        yAxisKey={yAxisKey}\n      />\n    );\n  }\n}\n\nexport default ScatterPlotBundle;\n","import React, { PureComponent } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ScatterPlotBundle from \"./lib\";\n\nfunction randomInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getRandomColor() {\n  var letters = \"0123456789ABCDEF\";\n  var color = \"#\";\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\nclass App extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      visibleXRange: [1492858000000, 1513695600000],\n      currentOverlay: null,\n      data: [],\n      dataPointColors: [\"#d50000\", \"#ff6d00\", \"#546e7a\"]\n    };\n    this.dataSetCount = 4;\n  }\n\n  componentDidMount() {\n    let data = [];\n    let dataPointColors = [];\n\n    for (let i = 0; i < this.dataSetCount; i++) {\n      data[i] = [\n        ...this.generateDummyData(\n          [1482858000000, 1513695600000],\n          [1, 200],\n          100000000\n        )\n      ];\n      dataPointColors[i] = getRandomColor();\n    }\n\n    this.setState({\n      ...this.state,\n      data: data,\n      dataPointColors: dataPointColors\n    });\n  }\n\n  generateDummyData = (xRange, yRange, dataFreq) => {\n    let dummyData = [];\n\n    for (let curX = xRange[0]; curX < xRange[1]; curX += dataFreq) {\n      dummyData.push({\n        time: curX,\n        value: randomInteger(yRange[0], yRange[1])\n      });\n    }\n\n    return dummyData;\n  };\n\n  render() {\n    let { data, visibleXRange, dataPointColors } = this.state;\n\n    return (\n      <ScatterPlotBundle\n        data={data}\n        visibleXRange={[...visibleXRange]}\n        width={1200}\n        minY={0}\n        maxY={200}\n        height={400}\n        xAxisKey={\"time\"}\n        yAxisKey={\"value\"}\n        dataPointColors={dataPointColors}\n      />\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}