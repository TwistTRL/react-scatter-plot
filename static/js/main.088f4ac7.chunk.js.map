{"version":3,"sources":["lib/PlottingUtils.js","lib/ScatterPlot.jsx","lib/index.js","lib/ScatterPlotBundle.jsx","index.js"],"names":["toDomYCoord_Linear","height","minY","maxY","dataY","toDomXCoord_Linear","width","minX","maxX","dataX","ScatterPlot","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","drawLinePlot","ctx","_this$props","data","dtWindow","clearRect","canvasW","canvasH","beginPath","map","d","i","domY","domX","moveTo","lineTo","stroke","drawScatterPlot","_this$props2","circle","getCircle","drawImage","scatterPlotCanvas","refs","scatterPlotCtx","getContext","x0","y0","x1","y1","r","color","w","h","quadraticCurveTo","closePath","fillStyle","fill","greenCircle","canvas","document","createElement","arc","Math","PI","blackCircle","redCircle","react_default","a","className","ref","style","position","PureComponent","ScatterPlotBundle","filterDataToFitDtWindow","minIndex","maxIndex","filteredData","array","forEach","time","length","slice","filter","hr","lib_ScatterPlot","currentOverlay","render","App","state","lib","toConsumableArray","ReactDOM","src_App","getElementById"],"mappings":"kNAIO,SAASA,EAAmBC,EAAQC,EAAMC,EAAMC,GACnD,OAAOH,GAAUG,EAAQF,KAAUC,EAAOD,GAAQD,GAO/C,SAASI,EAAmBC,EAAOC,EAAMC,EAAMC,GAClD,OAAQA,EAAQF,KAAUC,EAAOD,GAAQD,OC2H9BI,cAhIX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAoCVQ,aAAe,SAACC,GAAQ,IAAAC,EACKT,EAAKD,MAAxBW,EADcD,EACdC,KAAMC,EADQF,EACRE,SAEZH,EAAII,UAAU,EAAG,EAAGZ,EAAKa,QAASb,EAAKc,SACvCN,EAAIO,YACJL,EAAKM,IAAI,SAACC,EAAGC,GACT,IAAIC,EAAMC,EAAO3B,EAAmBO,EAAKa,QAASF,EAAS,GAAIA,EAAS,GAAIM,EAAC,MAC7EE,EAAO/B,EAAmBY,EAAKc,QAAS,EAAG,IAAKG,EAAC,OAEvC,IAANC,EACAV,EAAIa,OAAOD,EAAMD,GAEjBX,EAAIc,OAAOF,EAAMD,KAGzBX,EAAIe,UApDWvB,EAuDnBwB,gBAAkB,SAAChB,GAAQ,IAAAiB,EACEzB,EAAKD,MAAxBW,EADiBe,EACjBf,KAAMC,EADWc,EACXd,SAEZH,EAAII,UAAU,EAAG,EAAGZ,EAAKa,QAASb,EAAKc,SACvCJ,EAAKM,IAAI,SAAAC,GACL,IAAIE,EAAMC,EAAO3B,EAAmBO,EAAKa,QAASF,EAAS,GAAIA,EAAS,GAAIM,EAAC,MAEzES,EAAS1B,EAAK2B,UAAU,SAE5BR,EAAO/B,EAAmBY,EAAKc,QAAS,EAAG,IAAKG,EAAC,OAEjDT,EAAIoB,UAAUF,EAAQN,EAAMD,MAhEhCnB,EAAKa,QAAUb,EAAKD,MAAML,MAC1BM,EAAKc,QAAUd,EAAKD,MAAMV,OAHXW,mFAOfG,KAAK0B,kBAAoB1B,KAAK2B,KAAKD,kBACnC1B,KAAK4B,eAAiB5B,KAAK0B,kBAAkBG,WAAW,MACxD7B,KAAKI,aAAaJ,KAAK4B,6DAIvB5B,KAAKI,aAAaJ,KAAK4B,kDAGjBvB,EAAKyB,EAAIC,EAAIC,EAAIC,EAAIC,EAAGC,GAC9B,IAAIC,EAAIJ,EAAKF,EACTO,EAAIJ,EAAKF,EAETG,EAAIE,EAAI,IAAGF,EAAIE,EAAI,GACnBF,EAAIG,EAAI,IAAGH,EAAIG,EAAI,GAEvBhC,EAAIO,YACJP,EAAIa,OAAOc,EAAKE,EAAGH,GACnB1B,EAAIiC,iBAAiBN,EAAID,EAAIC,EAAID,EAAKG,GACtC7B,EAAIc,OAAOa,EAAIC,EAAKC,GACpB7B,EAAIiC,iBAAiBN,EAAIC,EAAID,EAAKE,EAAGD,GACrC5B,EAAIc,OAAOW,EAAKI,EAAGD,GACnB5B,EAAIiC,iBAAiBR,EAAIG,EAAIH,EAAIG,EAAKC,GACtC7B,EAAIc,OAAOW,EAAIC,EAAKG,GACpB7B,EAAIiC,iBAAiBR,EAAIC,EAAID,EAAKI,EAAGH,GACrC1B,EAAIkC,YACJlC,EAAImC,UAAYL,EAChB9B,EAAIoC,yCAoCEN,GACN,GAAc,UAAVA,EAAmB,CACnB,IAAKnC,KAAK0C,YAAa,CACnB,IAAIC,EAASC,SAASC,cAAc,UACpCF,EAAOpD,MAAQ,EACfoD,EAAOzD,OAAS,EAChB,IAAImB,EAAMsC,EAAOd,WAAW,MAC5BxB,EAAIyC,IAAI,EAAG,EAAG,EAAG,EAAG,EAAIC,KAAKC,IAC7B3C,EAAImC,UAAY,UAChBnC,EAAIoC,OACJzC,KAAK0C,YAAcC,EAEvB,OAAO3C,KAAK0C,YACT,GAAc,UAAVP,EAAmB,CAC1B,IAAKnC,KAAKiD,YAAa,CACnB,IAAIN,EAASC,SAASC,cAAc,UACpCF,EAAOpD,MAAQ,EACfoD,EAAOzD,OAAS,EAChB,IAAImB,EAAMsC,EAAOd,WAAW,MAC5BxB,EAAIyC,IAAI,EAAG,EAAG,EAAG,EAAG,EAAIC,KAAKC,IAC7B3C,EAAImC,UAAY,UAChBnC,EAAIoC,OACJzC,KAAKiD,YAAcN,EAEvB,OAAO3C,KAAKiD,YAEZ,IAAKjD,KAAKkD,UAAW,CACjB,IAAIP,EAASC,SAASC,cAAc,UACpCF,EAAOpD,MAAQ,EACfoD,EAAOzD,OAAS,EAChB,IAAImB,EAAMsC,EAAOd,WAAW,MAC5BxB,EAAIyC,IAAI,EAAG,EAAG,EAAG,EAAG,EAAIC,KAAKC,IAC7B3C,EAAImC,UAAY,UAChBnC,EAAIoC,OACJzC,KAAKkD,UAAYP,EAErB,OAAO3C,KAAKkD,2CAUhB,OACIC,EAAAC,EAAAP,cAAA,UACIQ,UAAU,sBACVC,IAAI,oBACJ/D,MAAOS,KAAKU,QACZxB,OAAQc,KAAKW,QACb4C,MAVe,CACfC,SAAU,qBAlHAC,iBCNXC,6MCIXC,wBAA0B,SAACpD,EAAMf,EAAMC,GACnC,IAAImE,EAAW,EAAGC,EAAW,EACzBC,EAAevD,EAyBnB,OAvBAuD,EAAaC,MAAMC,QAAQ,SAAClD,EAAGC,GACvBD,EAAEmD,MAAQzE,IAGFoE,EAFJ9C,EAAEmD,KAAOzE,GACLuB,EAAI,EACOA,EAAI,EAKRA,GAKfD,EAAEmD,MAAQxE,GAAqB,IAAboE,IAClBA,EAAW9C,KAIF,IAAb8C,IACAA,EAAWC,EAAaI,OAAS,GAG9BJ,EAAaK,MAAMP,EAAUC,4EAG/B,IAAAvD,EACqCN,KAAKJ,MAAvCW,EADHD,EACGC,KAAMC,EADTF,EACSE,SAAUjB,EADnBe,EACmBf,MAAOL,EAD1BoB,EAC0BpB,OAE3B4E,EAAevD,EAAK6D,OAAO,SAAAC,GAC3B,OAAOA,EAAE,MAAY7D,EAAS,IAAM6D,EAAE,MAAY7D,EAAS,KAG/D,OACI2C,EAAAC,EAAAP,cAAA,OAAKQ,UAAU,oBAAoBE,MAAO,CAAEC,SAAU,aAClDL,EAAAC,EAAAP,cAACyB,EAAD,CACI/D,KAAMuD,EACNtD,SAAUA,EACVjB,MAAOA,EACPL,OAAQA,IACXc,KAAKJ,MAAM2E,eAAiBvE,KAAKJ,MAAM4E,OAAOV,GAAgB,aA9C/CL,wBCE1BgB,cACF,SAAAA,EAAY7E,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyE,IACf5E,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2E,GAAAtE,KAAAH,KAAMJ,KAED8E,MAAQ,CACTlE,SAAU,CAAC,WAAe,YAC1B+D,eAAgB,MALL1E,wEAUf,OACIsD,EAAAC,EAAAP,cAAC8B,EAAD,CACIpE,KAAMA,EACNC,SAAQV,OAAA8E,EAAA,EAAA9E,CAAME,KAAK0E,MAAMlE,UACzBjB,MAAO,KACPL,OAAQ,IACRqF,eAAgBvE,KAAK0E,MAAMH,eAC3BC,OAAQ,cAlBNf,iBAwBlBoB,IAASL,OAAOrB,EAAAC,EAAAP,cAACiC,EAAD,MAASlC,SAASmC,eAAe","file":"static/js/main.088f4ac7.chunk.js","sourcesContent":["//height: canvas px\n// minY: lowest value\n// maxY: highest value\n// dataY: value\nexport function toDomYCoord_Linear(height, minY, maxY, dataY) {\n    return height - (dataY - minY) / ((maxY - minY) / height);\n}\n\nexport function fromDomYCoord_Linear(height, minY, maxY, domY) {\n    return (height - domY) * ((maxY - minY) / height) + minY;\n}\n\nexport function toDomXCoord_Linear(width, minX, maxX, dataX) {\n    return (dataX - minX) / ((maxX - minX) / width);\n}\n\nexport function fromDomXCoord_Linear(width, minX, maxX, domX) {\n    return domX * ((maxX - minX) / width) + minX;\n}","import React, { PureComponent } from \"react\";\nimport {\n    toDomYCoord_Linear,\n    toDomXCoord_Linear,\n    fromDomXCoord_Linear\n} from \"./PlottingUtils\"\n\nclass ScatterPlot extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.canvasW = this.props.width\n        this.canvasH = this.props.height\n    }\n\n    componentDidMount() {\n        this.scatterPlotCanvas = this.refs.scatterPlotCanvas\n        this.scatterPlotCtx = this.scatterPlotCanvas.getContext(\"2d\")\n        this.drawLinePlot(this.scatterPlotCtx)\n    }\n\n    componentDidUpdate() {\n        this.drawLinePlot(this.scatterPlotCtx)\n    }\n\n    roundRect(ctx, x0, y0, x1, y1, r, color) {\n        var w = x1 - x0;\n        var h = y1 - y0;\n\n        if (r > w / 2) r = w / 2;\n        if (r > h / 2) r = h / 2;\n\n        ctx.beginPath();\n        ctx.moveTo(x1 - r, y0)\n        ctx.quadraticCurveTo(x1, y0, x1, y0 + r)\n        ctx.lineTo(x1, y1 - r)\n        ctx.quadraticCurveTo(x1, y1, x1 - r, y1)\n        ctx.lineTo(x0 + r, y1)\n        ctx.quadraticCurveTo(x0, y1, x0, y1 - r)\n        ctx.lineTo(x0, y0 + r)\n        ctx.quadraticCurveTo(x0, y0, x0 + r, y0)\n        ctx.closePath()\n        ctx.fillStyle = color\n        ctx.fill()\n    }\n\n    drawLinePlot = (ctx) => {\n        let { data, dtWindow } = this.props\n\n        ctx.clearRect(0, 0, this.canvasW, this.canvasH)\n        ctx.beginPath()\n        data.map((d, i) => {\n            let domY, domX = toDomXCoord_Linear(this.canvasW, dtWindow[0], dtWindow[1], d[\"time\"])\n            domY = toDomYCoord_Linear(this.canvasH, 0, 200, d[\"value\"])\n\n            if (i === 0) {\n                ctx.moveTo(domX, domY)\n            } else {\n                ctx.lineTo(domX, domY)\n            }\n        })\n        ctx.stroke()\n    }\n\n    drawScatterPlot = (ctx) => {\n        let { data, dtWindow } = this.props\n\n        ctx.clearRect(0, 0, this.canvasW, this.canvasH)\n        data.map(d => {\n            let domY, domX = toDomXCoord_Linear(this.canvasW, dtWindow[0], dtWindow[1], d[\"time\"])\n\n            let circle = this.getCircle(\"green\");\n\n            domY = toDomYCoord_Linear(this.canvasH, 0, 200, d[\"value\"])\n\n            ctx.drawImage(circle, domX, domY);\n        })\n    }\n\n    getCircle(color) {\n        if (color === \"green\") {\n            if (!this.greenCircle) {\n                let canvas = document.createElement(\"canvas\");\n                canvas.width = 6;\n                canvas.height = 6;\n                let ctx = canvas.getContext(\"2d\");\n                ctx.arc(3, 3, 2, 0, 2 * Math.PI);\n                ctx.fillStyle = '#c8cad1'\n                ctx.fill();\n                this.greenCircle = canvas;\n            }\n            return this.greenCircle;\n        } else if (color === \"black\") {\n            if (!this.blackCircle) {\n                let canvas = document.createElement(\"canvas\");\n                canvas.width = 6;\n                canvas.height = 6;\n                let ctx = canvas.getContext(\"2d\");\n                ctx.arc(3, 3, 2, 0, 2 * Math.PI);\n                ctx.fillStyle = '#727272'\n                ctx.fill();\n                this.blackCircle = canvas;\n            }\n            return this.blackCircle;\n        } else {\n            if (!this.redCircle) {\n                let canvas = document.createElement(\"canvas\");\n                canvas.width = 6;\n                canvas.height = 6;\n                let ctx = canvas.getContext(\"2d\");\n                ctx.arc(3, 3, 2, 0, 2 * Math.PI);\n                ctx.fillStyle = '#cc7766'\n                ctx.fill();\n                this.redCircle = canvas;\n            }\n            return this.redCircle;\n        }\n    }\n\n    render() {\n        const styles = {\n            scatterPlotCanvas: {\n                position: \"absolute\"\n            }\n        }\n        return (\n            <canvas\n                className=\"scatter-plot-canvas\"\n                ref=\"scatterPlotCanvas\"\n                width={this.canvasW}\n                height={this.canvasH}\n                style={styles.scatterPlotCanvas}\n            />\n        )\n    }\n}\n\nexport default ScatterPlot","import ScatterPlotBundle from \"./ScatterPlotBundle\";\nexport default ScatterPlotBundle;","import React, { PureComponent } from \"react\";\nimport ScatterPlot from \"./ScatterPlot\"\n\nclass ScatterPlotBundle extends PureComponent {\n\n    filterDataToFitDtWindow = (data, minX, maxX) => {\n        let minIndex = 0, maxIndex = 0\n        let filteredData = data\n\n        filteredData.array.forEach((d, i) => {\n            if (d.time <= minX) {\n                if (d.time < minX) {\n                    if (i > 0) {\n                        minIndex = i - 1\n                    } else {\n                        minIndex = i\n                    }\n                } else {\n                    minIndex = i\n                }\n            }\n\n            // only take the first maxX\n            if (d.time >= maxX && maxIndex === 0) {\n                maxIndex = i\n            }\n        })\n\n        if (maxIndex === 0) {\n            maxIndex = filteredData.length - 1\n        }\n\n        return filteredData.slice(minIndex, maxIndex)\n    }\n\n    render() {\n        const { data, dtWindow, width, height } = this.props\n\n        let filteredData = data.filter(hr => {\n            return hr[\"time\"] >= dtWindow[0] && hr[\"time\"] <= dtWindow[1]\n        })\n\n        return (\n            <div className=\"scatter-plot-wrap\" style={{ position: \"absolute\" }}>\n                <ScatterPlot\n                    data={filteredData}\n                    dtWindow={dtWindow}\n                    width={width}\n                    height={height} />\n                {this.props.currentOverlay ? this.props.render(filteredData) : null}\n            </div>\n        )\n    }\n}\n\nexport default ScatterPlotBundle","import React, { PureComponent } from \"react\";\nimport ReactDOM from 'react-dom'\nimport ScatterPlotBundle from \"./lib\"\nimport data from \"./scatterData.json\"\n\nclass App extends PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dtWindow: [1505894400000, 1513695600000],\n            currentOverlay: null\n        }\n    }\n\n    render() {\n        return (\n            <ScatterPlotBundle\n                data={data}\n                dtWindow={[...this.state.dtWindow]}\n                width={1200}\n                height={400}\n                currentOverlay={this.state.currentOverlay}\n                render={null}\n            />\n        )\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}