{"version":3,"sources":["lib/PlottingUtils.js","lib/ScatterPlot.jsx","lib/YAxis.js","lib/PlotAxisGrid.js","lib/index.js","lib/ScatterPlotBundle.jsx","lib/PlotInteraction/DragOverlay.js","lib/PlotInteraction/CountDown.js","lib/PlotInteraction/PlotInteractionBox.js","lib/PlotInteraction/PlotInteractionBoxProvider.js","index.js"],"names":["toDomYCoord_Linear","height","minY","maxY","dataY","ScatterPlot","props","drawScatterPlot","ctx","dataSets","dataPointColors","visibleXRange","visibleYRange","xAxisKey","yAxisKey","configs","undefined","dotCanvasSize","plotStyling","dotSize","clearRect","canvasW","canvasH","beginPath","forEach","dataSet","i","length","dataObj","domY","width","minX","maxX","domX","circle","getCircle","drawImage","dataPointColorCanvasCache","this","scatterPlotCanvas","refs","scatterPlotCtx","getContext","prevProps","prevState","nextProps","nextState","isEqual","state","color","size","cachedDataPointColorCanvas","canvas","document","createElement","arc","Math","PI","fillStyle","fill","className","ref","style","position","Component","round5","x","round","ceil","YAxis","generateYAxisLabels","labelPadding","labelTextHeight","yAxisLabels","numOfLabelsCanFit","yAxisSpan","yAxisLabelInterval","curYAxisLabel","push","drawYAxis","yAxisLabelPadding","axis","strokeStyle","lineWidth","font","textBaseline","textAlign","moveTo","lineTo","stroke","yAxisLabel","fillText","yAxisCanvas","yAxisCtx","n","parseInt","PlotAxisGrid","drawYAxisGrid","plotAxisGridCanvas","plotAxisGridCtx","ScatterPlotBundle","isRenderPlotOnly","isDynamicXAxis","isDynamicYAxis","yAxisPadding","Number","MAX_VALUE","MIN_VALUE","visibleYRangeDistance","filteredDataSets","filter","borderCollapse","DragOverlay","handleMouseMove","ev","stopPropagation","mouseMoveHandler","handleMouseUp","mouseUpHandler","cursor","addEventListener","removeEventListener","PureComponent","CountDown","timeout","callback","setTimeout","clearTimeout","MODE_HOVERING","ACTION_MOUSEDOWN","ACTION_MOUSEMOVE","ACTION_MOUSEUP","ACTION_TIMEOUT","INTERACTION_MODEL_PANNING","PlotInteractionBox","handleMouseMove_Hovering","hoveringHandler","getCustomEventObject","handleMouseOut_Hovering","hoverEndHandler","handleMouseDown_Hovering","preventDefault","myEV","initialMouseDownPosition","transition","clickTimeout","autoSelectingTimeout","handleMouseMove_Clicking","selectingHandler","abs","handleMouseUp_Clicking","clickHandler","doubleClickHandler","prevClickTimeStamp","timeStamp","handleMouseMove_AutoSelecting","start","end","handleMouseUp_AutoSelecting","handleMouseMove_Selecting","handleMouseUp_Selecting","selectedHandler","handleMouseMove_Panning","panningHandler","handleMouseUp_Panning","pannedHandler","mode","React","createRef","children","onMouseMove","onMouseOut","onMouseDown","action","nextMode","transitionGraph","setState","current","getBoundingClientRect","left","top","clientX","clientY","PlotInteractionBoxProvider","handleHovering","hoveringPosition","handleHoverPosChange","handleHoverEnd","handleClick","clickPosition","handleDoubleClick","doubleClickPosition","handleSelecting","selectingPositions","handleSelected","selectedPositions","handlePanning","panningPositions","handlePan","handlePanned","pannedPositions","render","getRandomColor","floor","random","App","generateDummyData","xRange","yRange","dataFreq","min","max","dummyData","curX","time","value","e","prevPanDist","currentOverlay","prevMaxY","dataSetCount","moment","console","log","duration","diff","xAxisPadding","ReactDOM","getElementById"],"mappings":"gVAIO,SAASA,EAAmBC,EAAQC,EAAMC,EAAMC,GACnD,OAAOH,GAAUG,EAAQF,KAAUC,EAAOD,GAAQD,G,ICiHvCI,E,YAjHb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAsBRC,gBAAkB,SAAAC,GAAQ,IAAD,EASnB,EAAKF,MAPPG,EAFqB,EAErBA,SACAC,EAHqB,EAGrBA,gBACAC,EAJqB,EAIrBA,cACAC,EALqB,EAKrBA,cACAC,EANqB,EAMrBA,SACAC,EAPqB,EAOrBA,SACAC,EARqB,EAQrBA,QAGF,QAAiBC,IAAbP,EAAJ,CAIA,IAAIQ,EACFF,EAAQG,YAAYC,QAAU,EAC1BJ,EAAQG,YAAYC,QACpB,EAAKF,cAEXT,EAAIY,UAAU,EAAG,EAAG,EAAKC,QAAS,EAAKC,SACvCd,EAAIe,YAEJd,EAASe,SAAQ,SAACC,EAASC,GACrBD,EAAQE,OAAS,GACnBF,EAAQD,SAAQ,SAAAI,GACd,IAAIC,ED1CqBC,EAAOC,EAAMC,EC2CpCC,GD3CuBH,EC6CnB,EAAKT,QD7CqBU,EC8C1BpB,EAAc,GD9CkBqB,EC+ChCrB,EAAc,IACdiB,EAAQf,GD/CJkB,KAAUC,EAAOD,GAAQD,GCiD/Bb,EAAgB,GAEhBiB,EAAS,EAAKC,UAAUzB,EAAgBgB,GAAIT,GAEhDY,EACE7B,EACE,EAAKsB,QACLV,EAAc,GACdA,EAAc,GACdgB,EAAQd,IAEVG,EAAgB,EAElBT,EAAI4B,UAAUF,EAAQD,EAAMJ,WApElC,EAAKR,QAAU,EAAKf,MAAMwB,MAC1B,EAAKR,QAAU,EAAKhB,MAAML,OAE1B,EAAKoC,0BAA4B,GACjC,EAAKpB,cAAgB,EANJ,E,iFAUjBqB,KAAKC,kBAAoBD,KAAKE,KAAKD,kBACnCD,KAAKG,eAAiBH,KAAKC,kBAAkBG,WAAW,MACxDJ,KAAK/B,gBAAgB+B,KAAKG,kB,yCAGTE,EAAWC,GAC5BN,KAAK/B,gBAAgB+B,KAAKG,kB,4CAGNI,EAAWC,GAC/B,OAAQC,IAAQT,KAAKhC,MAAOuC,IAAcP,KAAKU,QAAUF,I,gCAwDjDG,GAAkB,IAAXC,EAAU,uDAAH,EAClBC,EAA6Bb,KAAKD,0BACpCY,EAAQC,GAGV,QAAmClC,IAA/BmC,EAA0C,CAC5C,IAAIC,EAASC,SAASC,cAAc,UACpCF,EAAOtB,MAAQoB,EACfE,EAAOnD,OAASiD,EAChB,IAAI1C,EAAM4C,EAAOV,WAAW,MAC5BlC,EAAI+C,IAAIL,EAAO,EAAGA,EAAO,EAAGA,EAAO,EAAG,EAAG,EAAIM,KAAKC,IAClDjD,EAAIkD,UAAYT,EAChBzC,EAAImD,OACJR,EAA6BC,EAE/B,OAAOD,I,+BAUP,OACE,4BACES,UAAU,sBACVC,IAAI,oBACJ/B,MAAOQ,KAAKjB,QACZpB,OAAQqC,KAAKhB,QACbwC,MAXiB,CACjBC,SAAU,kB,GAlGQC,aCA1B,SAASC,EAAOC,GACd,OAAOV,KAAKW,MAAyB,EAAnBX,KAAKY,KAAKF,EAAI,I,IAoInBG,E,YA5Hb,WAAY/D,GAAQ,IAAD,8BACjB,4CAAMA,KAmBRN,mBAAqB,SAACC,EAAQC,EAAMC,EAAMC,GACxC,OAAOH,GAAUG,EAAQF,KAAUC,EAAOD,GAAQD,IArBjC,EAwBnBqE,oBAAsB,SACpBpE,EACAC,EACAF,GAYA,IATI,IAFJsE,EAEG,uDAFY,GACfC,EACG,uCACCC,EAAc,GACdC,EAAoBlB,KAAKW,MAC3BlE,GAAUuE,EAAkBD,IAE1BI,EAAYV,EAAO9D,EAAOD,GAC1B0E,EAAqBX,EAAOU,EAAYD,GAItCG,GAAiBD,EACrBC,EAAgBZ,EAAO/D,GACvB2E,GAAiBD,EAEjBH,EAAYK,KAAKD,GAInB,IACE,IAAIA,EAAgB,EACpBA,EAAgBZ,EAAO9D,GACvB0E,GAAiBD,EAEjBH,EAAYK,KAAKD,GAGnB,OAAOJ,GAxDU,EA2DnBM,UAAY,SAAAvE,GACV,IAEIwE,EAAoB,EAAK1E,MAAMS,QAAQkE,KAAKD,kBAC5CP,EAAc,EAAKH,oBACrB,EAAKpE,KACL,EAAKC,KACL,EAAKmB,QACL0D,EACA,IAIFxE,EAAIY,UAAU,EAAG,EAAG,EAAKC,QAAS,EAAKC,SACvCd,EAAIe,YAGJf,EAAI0E,YAAc,QAClB1E,EAAI2E,UAAY,IAEhB3E,EAAI4E,KAAO,kCACX5E,EAAI2E,UAAY,GAChB3E,EAAI6E,aAAe,SACnB7E,EAAI8E,UAAY,QAChB9E,EAAIkD,UAAY,OAGhBlD,EAAI+E,OAAO,EAAKlE,QAAS,GACzBb,EAAIgF,OAAO,EAAKnE,QAAS,EAAKC,QAAU,GACxCd,EAAIiF,SAGJhB,EAAYjD,SAAQ,SAAAkE,GAClB,IAAI7D,EAAO,EAAK7B,mBACd,EAAKsB,QACL,EAAKpB,KACL,EAAKC,KACLuF,GAEFlF,EAAI+E,OAAO,EAAKlE,QArCa,EAqCuBQ,GACpDrB,EAAIgF,OAAO,EAAKnE,QAASQ,GACzBrB,EAAImF,SAASD,EAAY,EAAKrE,QAxCb,GAwCqCQ,MAGxDrB,EAAIiF,UArGJ,EAAKpE,QAAU,EAAKf,MAAMe,QAC1B,EAAKC,QAAU,EAAKhB,MAAMgB,QAC1B,EAAKpB,KAAO,EAAKI,MAAMJ,KACvB,EAAKC,KAAO,EAAKG,MAAMH,KALN,E,iFASjBmC,KAAKsD,YAActD,KAAKE,KAAKoD,YAC7BtD,KAAKuD,SAAWvD,KAAKsD,YAAYlD,WAAW,MAC5CJ,KAAKyC,UAAUzC,KAAKuD,Y,2CAIpBvD,KAAKpC,KAAOoC,KAAKhC,MAAMJ,KACvBoC,KAAKnC,KAAOmC,KAAKhC,MAAMH,KACvBmC,KAAKyC,UAAUzC,KAAKuD,Y,0CAyFFC,GAClB,OAAoC,IAA5BC,SAASD,EAAI,GAAI,IAAM,K,+BAM/B,OACE,4BACElC,UAAU,cACVC,IAAI,cACJ/B,MAAOQ,KAAKjB,QACZpB,OAAQqC,KAAKhB,c,GAvHD0C,aCRpB,SAASC,EAAOC,GACd,OAAOV,KAAKW,MAAyB,EAAnBX,KAAKY,KAAKF,EAAI,I,IA0GnB8B,E,YAlGb,WAAY1F,GAAQ,IAAD,8BACjB,4CAAMA,KAmBRgE,oBAAsB,SAACpE,EAAMC,EAAMF,EAAQsE,EAAcC,GASvD,IARA,IAAIC,EAAc,GACdC,EAAoBlB,KAAKW,MAC3BlE,GAAUuE,EAAkBD,IAE1BI,EAAYV,EAAO9D,EAAOD,GAC1B0E,EAAqBX,EAAOU,EAAYD,GAItCG,GAAiBD,EACrBC,EAAgBZ,EAAO/D,GACvB2E,GAAiBD,EAEjBH,EAAYK,KAAKD,GAInB,IACE,IAAIA,EAAgB,EACpBA,EAAgBZ,EAAO9D,GACvB0E,GAAiBD,EAEjBH,EAAYK,KAAKD,GAGnB,OAAOJ,GA9CU,EAiDnBwB,cAAgB,SAAAzF,GACd,IAAIiE,EAAc,EAAKH,oBACrB,EAAKpE,KACL,EAAKC,KACL,EAAKmB,QACL,GACA,IAIFd,EAAIY,UAAU,EAAG,EAAG,EAAKC,QAAS,EAAKC,SACvCd,EAAIe,YAEJf,EAAI0E,YAAc,yBAClB1E,EAAI2E,UAAY,EAGhBV,EAAYjD,SAAQ,SAAAkE,GAClB,IAAI7D,EAAO7B,EACT,EAAKsB,QACL,EAAKpB,KACL,EAAKC,KACLuF,GAEFlF,EAAI+E,OAAO,EAAG1D,GACdrB,EAAIgF,OAAO,EAAKnE,QAASQ,MAG3BrB,EAAIiF,UA3EJ,EAAKpE,QAAU,EAAKf,MAAMe,QAC1B,EAAKC,QAAU,EAAKhB,MAAMgB,QAC1B,EAAKpB,KAAO,EAAKI,MAAMJ,KACvB,EAAKC,KAAO,EAAKG,MAAMH,KALN,E,iFASjBmC,KAAK4D,mBAAqB5D,KAAKE,KAAK0D,mBACpC5D,KAAK6D,gBAAkB7D,KAAK4D,mBAAmBxD,WAAW,MAC1DJ,KAAK2D,cAAc3D,KAAK6D,mB,2CAIxB7D,KAAKpC,KAAOoC,KAAKhC,MAAMJ,KACvBoC,KAAKnC,KAAOmC,KAAKhC,MAAMH,KACvBmC,KAAK2D,cAAc3D,KAAK6D,mB,0CA+DNL,GAClB,OAAoC,IAA5BC,SAASD,EAAI,GAAI,IAAM,K,+BAM/B,OACE,4BACElC,UAAU,iBACVC,IAAI,qBACJ/B,MAAOQ,KAAKjB,QACZpB,OAAQqC,KAAKhB,c,GA7FM0C,a,oBCXZoC,E,8LCUSvD,EAAWC,GAC/B,OAAQC,IAAQT,KAAKhC,MAAOuC,IAAcP,KAAKU,QAAUF,I,+BAGjD,IAAD,EAYHR,KAAKhC,MAVPG,EAFK,EAELA,SACAC,EAHK,EAGLA,gBACAoB,EAJK,EAILA,MACA7B,EALK,EAKLA,OACAC,EANK,EAMLA,KACAC,EAPK,EAOLA,KACAU,EARK,EAQLA,SACAC,EATK,EASLA,SACAC,EAVK,EAULA,QACAsF,EAXK,EAWLA,iBAGF,GAAI5F,EAASkB,OAAS,QAAkBX,IAAbP,EACzB,OAAO,KAfF,IATKyD,EASL,EAkBgDnD,EAAQkE,KAAzDqB,EAlBC,EAkBDA,eAAgBC,EAlBf,EAkBeA,eAAgBC,EAlB/B,EAkB+BA,aAElC5F,GADUG,EAAQG,YAAYC,QACd,CAACsF,OAAOC,UAAWD,OAAOE,YAC1ChG,EAAgB2F,EAChBhE,KAAKhC,MAAMK,cACX,CAAC8F,OAAOC,UAAWD,OAAOE,WAC1BC,EAAwB,EACxBC,EAAmB,GA8CvB,OA1CApG,EAASe,SAAQ,SAACC,EAASC,GACzBmF,EAAiBnF,GAAKD,EAAQqF,QAAO,SAAAlF,GA4BnC,OA3BK0E,IACC1E,EAAQf,GAAYF,EAAc,GACpCA,EAAc,GAAKiB,EAAQf,GAClBe,EAAQf,GAAYF,EAAc,KAC3CA,EAAc,GAAKiB,EAAQf,KAI3B0F,EAEA3E,EAAQf,IAAaF,EAAc,IACnCiB,EAAQf,IAAaF,EAAc,KAE/BiB,EAAQd,GAAYF,EAAc,GACpCA,EAAc,GAAKgB,EAAQd,GAClBc,EAAQd,GAAYF,EAAc,KAC3CA,EAAc,GAAKgB,EAAQd,KAI3Bc,EAAQd,GAAYF,EAAc,GACpCA,EAAc,GAAKgB,EAAQd,GAClBc,EAAQd,GAAYF,EAAc,KAC3CA,EAAc,GAAKgB,EAAQd,IAK7Bc,EAAQf,IAAaF,EAAc,IACnCiB,EAAQf,IAAaF,EAAc,SArE7BuD,EA0EmBtD,EAAc,GAAKA,EAAc,GAAhEgG,EAzEwB,EAAnBpD,KAAKY,KAAKF,EAAI,GA0EnBtD,EAAc,IACZ4F,EAAe,EAAIA,EAAuC,GAAxBI,EACpChG,EAAc,IACZ4F,EAAe,EAAIA,EAAuC,GAAxBI,EAE/BP,EAmDH,kBAAC,EAAD,CACE5F,SAAUoG,EACVnG,gBAAiBA,EACjBC,cAAeA,EACfC,cAAwB,OAATT,EAAgB,CAACD,EAAMC,GAAQS,EAC9CkB,MAAOA,EACP7B,OAAQA,EACRY,SAAUA,EACVC,SAAUA,EACVC,QAASA,KA3DXH,EAAyB,OAATT,EAAgB,CAACD,EAAMC,GAAQS,EAE7C,2BAAOgD,UAAU,cAAcE,MAAO,CAAEiD,eAAgB,aACtD,+BACE,wBAAInD,UAAU,mBACZ,wBACEA,UAAU,kBACVE,MAAO,CAAEhC,MApDC,KAsDT,IACD,kBAAC,EAAD,CACET,QAxDQ,GAyDRC,QAASrB,EACTC,KAAMU,EAAc,GACpBT,KAAMS,EAAc,GACpBG,QAASA,KAGb,wBAAI6C,UAAU,kBAAkBE,MAAO,CAAEhC,MAhEnC,OAiEH,IACD,yBAAKgC,MAAO,CAAEC,SAAU,aACtB,kBAAC,EAAD,CACE1C,QApEA,KAqEAC,QAASrB,EACTC,KAAMU,EAAc,GACpBT,KAAMS,EAAc,GACpBG,QAASA,KAGb,yBAAK+C,MAAO,CAAEC,SAAU,aACtB,kBAAC,EAAD,CACEtD,SAAUoG,EACVnG,gBAAiBA,EACjBC,cAAeA,EACfC,cAAeA,EACfkB,MAAOA,EACP7B,OAAQA,EACRY,SAAUA,EACVC,SAAUA,EACVC,QAASA,c,GApHGiD,a,cC+BjBgD,G,iNApBbC,gBAAkB,SAACC,GACjBA,EAAGC,mBAEHC,EADyB,EAAK9G,MAAzB8G,kBACYF,I,EAGnBG,cAAgB,SAACH,GACfA,EAAGC,mBAEHG,EADuB,EAAKhH,MAAvBgH,gBACUJ,I,wEAxBP,IACFK,EAAUjF,KAAKhC,MAAfiH,OACN,OAAO,yBAAK3D,UAAU,aAAaE,MAAO,CAACyD,OAAOA,O,0CAIlDlE,SAASmE,iBAAiB,YAAYlF,KAAK2E,iBAAgB,GAC3D5D,SAASmE,iBAAiB,UAAUlF,KAAK+E,eAAc,K,6CAIvDhE,SAASoE,oBAAoB,YAAYnF,KAAK2E,iBAAgB,GAC9D5D,SAASoE,oBAAoB,UAAUnF,KAAK+E,eAAc,O,GAbpCK,kBCkBXC,E,iLAnBX,OAAO,O,0CAGW,IAAD,EACQrF,KAAKhC,MAAzBsH,EADY,EACZA,QAAQC,EADI,EACJA,SACbvF,KAAKsF,QAAUE,WAAWD,EAASD,K,2CAInCG,aAAazF,KAAKsF,SADA,MAEOtF,KAAKhC,MAAzBsH,EAFa,EAEbA,QAAQC,EAFK,EAELA,SACbvF,KAAKsF,QAAUE,WAAWD,EAASD,K,6CAInCG,aAAazF,KAAKsF,a,GAjBEF,iBCMXM,G,MAAgB,YAMhBC,EAAmB,YACnBC,EAAmB,YACnBC,EAAiB,UACjBC,EAAiB,UA2BjBC,GAzByB,mBACnCL,EADmC,eAChBC,EAXO,aAUS,cAVT,YAUS,mBAGjCG,EAZ6B,iBASI,cAIjCF,EAZyB,aAQQ,cAKjCC,EAAiBH,GALgB,kBATJ,iBASI,mBAQjCI,EAfuB,WAOU,cASjCF,EAjByB,aAQQ,kBARR,YAQQ,eAWfC,EAAiBH,IAXF,cAPV,UAOU,eAYjBG,EAAiBH,IAGE,mBACrCA,EADqC,eAClBC,EA1BO,aAyBW,cAzBX,YAyBW,mBAGnCG,EA1ByB,aAuBU,cAInCF,EA3ByB,aAuBU,cAKnCC,EAAiBH,GALkB,kBAvBV,YAuBU,eAOjBG,EAAiBH,IAGF,mBACnCA,EADmC,eAChBC,EApCO,aAmCS,cAnCT,YAmCS,mBAGjCG,EAnCuB,WAgCU,cAIjCF,EApCuB,WAgCU,cAKjCC,EAAiBH,GALgB,kBAhCV,UAgCU,eAOjBG,EAAiBH,IAPA,GAqOvBM,GA3NoB,mBAChCN,EADgC,eACbC,EA9CO,aA6CM,cA7CN,WA6CM,eAEbE,EAAiBH,I,YAIrC,WAAY1H,GAAQ,IAAD,8BACjB,4CAAMA,KAuGRiI,yBAA2B,SAAArB,IAGzBsB,EAF0B,EAAKlI,MAAzBkI,iBACK,EAAKC,qBAAqBvB,KA1GpB,EA8GnBwB,wBAA0B,SAAAxB,IAExByB,EAD0B,EAAKrI,MAAzBqI,oBA/GW,EAmHnBC,yBAA2B,SAAA1B,GAAO,IAC1ByB,EAAoB,EAAKrI,MAAzBqI,gBACNzB,EAAG2B,iBACH,IAAIC,EAAO,EAAKL,qBAAqBvB,GACrC,EAAK6B,yBAA2BD,EAChCH,IACA,EAAKK,WAAWf,IAzHC,EA4HnBgB,aAAe,WACb,EAAKD,WAAWZ,IA7HC,EAgInBc,qBAAuB,WACrB,EAAKF,WAAWZ,IAjIC,EAoInBe,yBAA2B,SAAAjC,GACE,EAAK5G,MAA1B8I,iBAD0B,IAE1BL,EAFyB,eAEzBA,yBACFD,EAAO,EAAKL,qBAAqBvB,GAEnC1D,KAAK6F,IAAIP,EAAK7G,KAAO8G,EAAyB9G,MAAQ,IACtDuB,KAAK6F,IAAIP,EAAKjH,KAAOkH,EAAyB9G,MAAQ,IAItD,EAAK+G,WAAWd,IA9ID,EAkJnBoB,uBAAyB,SAAApC,GAAO,IAAD,EACc,EAAK5G,MAA1CiJ,EADuB,EACvBA,aAAcC,EADS,EACTA,mBACdC,EAFuB,eAEvBA,mBACFX,EAAO,EAAKL,qBAAqBvB,GAEZ,OAAvBuC,GACAA,EAAqB,IAAMvC,EAAGwC,WAE9B,EAAKD,mBAAqBvC,EAAGwC,UAC7BH,EAAaT,KAEb,EAAKW,mBAAqB,KAC1BD,EAAmBV,IAErB,EAAKE,WAAWb,IAhKC,EAmKnBwB,8BAAgC,SAAAzC,GAAO,IAC/BkC,EAAqB,EAAK9I,MAA1B8I,iBACAL,EAF8B,eAE9BA,yBACFD,EAAO,EAAKL,qBAAqBvB,GAEnC1D,KAAK6F,IAAIP,EAAK7G,KAAO8G,EAAyB9G,MAAQ,IACtDuB,KAAK6F,IAAIP,EAAKjH,KAAOkH,EAAyB9G,MAAQ,KAItDmH,EAAiB,CAAEQ,MAAOb,EAA0Bc,IAAKf,IACzD,EAAKE,WAAWd,KA9KD,EAkLnB4B,4BAA8B,SAAA5C,GAC5B,EAAK8B,WAAWb,IAnLC,EAsLnB4B,0BAA4B,SAAA7C,IAI1BkC,EAH2B,EAAK9I,MAA1B8I,kBAGW,CAAEQ,MAJa,eAE1Bb,yBAE8Cc,IADzC,EAAKpB,qBAAqBvB,MAzLpB,EA6LnB8C,wBAA0B,SAAA9C,IAIxB+C,EAH0B,EAAK3J,MAAzB2J,iBAGU,CAAEL,MAJY,eAExBb,yBAE6Cc,IADxC,EAAKpB,qBAAqBvB,KAErC,EAAK8B,WAAWb,IAlMC,EAqMnB+B,wBAA0B,SAAAhD,IAIxBiD,EAHyB,EAAK7J,MAAxB6J,gBAGS,CAAEP,MAJa,eAExBb,yBAE4Cc,IADvC,EAAKpB,qBAAqBvB,MAxMpB,EA4MnBkD,sBAAwB,SAAAlD,IAItBmD,EAHwB,EAAK/J,MAAvB+J,eAGQ,CAAET,MAJY,eAEtBb,yBAE2Cc,IADtC,EAAKpB,qBAAqBvB,KAErC,EAAK8B,WAAWb,IA/MhB,EAAKnF,MAAQ,CAAEsH,KAAMtC,GACrB,EAAKnE,IAAM0G,IAAMC,YACjB,EAAKzB,yBAA2B,KAChC,EAAKU,mBAAqB,KALT,E,sEAQT,IAAD,EAC2BnH,KAAKhC,MAAjCwB,EADC,EACDA,MAAO7B,EADN,EACMA,OAAQwK,EADd,EACcA,SACjB3G,EAAQ,CAAEhC,QAAO7B,UAErB,OAAQqC,KAAKU,MAAMsH,MACjB,KAAKtC,EACH,OACE,6BACE,yBACEnE,IAAKvB,KAAKuB,IACVC,MAAOA,EACP4G,YAAapI,KAAKiG,yBAClBoC,WAAYrI,KAAKoG,wBACjBkC,YAAatI,KAAKsG,0BAEjB6B,IAIT,IA9EuB,WA+ErB,OACE,oCACE,yBAAK5G,IAAKvB,KAAKuB,IAAKC,MAAOA,GACxB2G,GAEH,kBAAC,EAAD,CACErD,iBAAkB9E,KAAK6G,yBACvB7B,eAAgBhF,KAAKgH,uBACrB/B,OAAO,UAET,kBAAC,EAAD,CAAWK,QAAS,IAAKC,SAAUvF,KAAK2G,gBAG9C,IA3F4B,gBA4F1B,OACE,oCACE,yBAAKpF,IAAKvB,KAAKuB,IAAKC,MAAOA,GACxB2G,GAEH,kBAAC,EAAD,CACErD,iBAAkB9E,KAAKqH,8BACvBrC,eAAgBhF,KAAKwH,4BACrBvC,OAAO,gBAET,kBAAC,EAAD,CAAWK,QAAS,IAAKC,SAAUvF,KAAK4G,wBAG9C,IAxGwB,YAyGtB,OACE,oCACE,yBAAKrF,IAAKvB,KAAKuB,IAAKC,MAAOA,GACxB2G,GAEH,kBAAC,EAAD,CACErD,iBAAkB9E,KAAKyH,0BACvBzC,eAAgBhF,KAAK0H,wBACrBzC,OAAO,iBAIf,IApHsB,UAqHpB,OACE,oCACE,yBAAK1D,IAAKvB,KAAKuB,IAAKC,MAAOA,GACxB2G,GAEH,kBAAC,EAAD,CACErD,iBAAkB9E,KAAK4H,wBACvB5C,eAAgBhF,KAAK8H,sBACrB7C,OAAO,cAIf,QACE,OAAO,2BAAIjF,KAAKU,MAAMsH,S,iCAKjBO,GAAS,IAGdC,EAFsBxI,KAAKhC,MAAzByK,gBACSzI,KAAKU,MAAdsH,MAC+BO,GACjCC,GACFxI,KAAK0I,SAAS,CAAEV,KAAMQ,M,2CAIL5D,GAAK,IAAD,EACH5E,KAAKuB,IAAIoH,QAAQC,wBAA/BC,EADiB,EACjBA,KAAMC,EADW,EACXA,IACNC,EAAqBnE,EAArBmE,QAASC,EAAYpE,EAAZoE,QAGf,MAAO,CAAErJ,KAFEoJ,EAAUF,EAENtJ,KADJyJ,EAAUF,EACAC,UAASC,e,GAtGD5D,kBCoClB6D,E,YAzFb,WAAYjL,GAAQ,IAAD,8BACjB,4CAAMA,KAiCRkL,eAAiB,SAAAC,GACf,EAAKT,SAAL,eAAmB,EAAKhI,MAAxB,CAA+ByI,sBAC3B,EAAKnL,MAAMoL,sBACb,EAAKpL,MAAMoL,qBAAqBD,IArCjB,EAyCnBE,eAAiB,WACf,EAAKX,SAAL,eAAmB,EAAKhI,MAAxB,CAA+ByI,iBAAkB,QAC7C,EAAKnL,MAAMoL,sBACb,EAAKpL,MAAMoL,qBAAqB,OA5CjB,EAgDnBE,YAAc,SAAAC,GACZ,EAAKb,SAAL,eACK,EAAKhI,MADV,CAEE6I,mBAEE,EAAKvL,MAAMsL,aACb,EAAKtL,MAAMsL,eAtDI,EA0DnBE,kBAAoB,SAAAC,GAClB,EAAKf,SAAL,eAAmB,EAAKhI,MAAxB,CAA+B+I,0BA3Dd,EA8DnBC,gBAAkB,SAAAC,GAChB,EAAKjB,SAAL,eAAmB,EAAKhI,MAAxB,CAA+BiJ,yBA/Dd,EAkEnBC,eAAiB,SAAAC,GACf,EAAKnB,SAAL,eACK,EAAKhI,MADV,CAEEmJ,oBACAF,mBAAoB,SAtEL,EA0EnBG,cAAgB,SAAAC,GACd,EAAKrB,SAAL,eAAmB,EAAKhI,MAAxB,CAA+BqJ,sBAC3B,EAAK/L,MAAMgM,WACb,EAAKhM,MAAMgM,UAAUD,IA7EN,EAiFnBE,aAAe,SAAAC,GACb,EAAKxB,SAAL,eAAmB,EAAKhI,MAAxB,CAA+BwJ,kBAAiBH,iBAAkB,QAC9D,EAAK/L,MAAMiM,cACb,EAAKjM,MAAMiM,aAAaC,IAlF1B,EAAKxJ,MAAQ,CACXyI,iBAAkB,KAClBI,cAAe,KACfE,oBAAqB,KACrBE,mBAAoB,KACpBE,kBAAmB,KACnBE,iBAAkB,KAClBG,gBAAiB,MATF,E,sEAaT,IAAD,EACyBlK,KAAKhC,MAA/BmM,EADC,EACDA,OAAQ3K,EADP,EACOA,MAAO7B,EADd,EACcA,OACrB,OACE,kBAAC,EAAD,CACE6B,MAAOA,EACP7B,OAAQA,EACR8K,gBAAiB1C,EACjBG,gBAAiBlG,KAAKkJ,eACtB7C,gBAAiBrG,KAAKqJ,eACtBpC,aAAcjH,KAAKsJ,YACnBpC,mBAAoBlH,KAAKwJ,kBACzB1C,iBAAkB9G,KAAK0J,gBACvB/B,gBAAiB3H,KAAK4J,eACtB/B,eAAgB7H,KAAK8J,cACrB/B,cAAe/H,KAAKiK,cAEnBE,EAAOnK,KAAKU,Y,GA9BoBgB,a,uBCMzC,SAAS0I,IAGP,IAFA,IACIzJ,EAAQ,IACHvB,EAAI,EAAGA,EAAI,EAAGA,IACrBuB,GAHY,mBAGKO,KAAKmJ,MAAsB,GAAhBnJ,KAAKoJ,WAEnC,OAAO3J,E,IAGH4J,E,YACJ,WAAYvM,GAAQ,IAAD,8BACjB,4CAAMA,KAyCRwM,kBAAoB,SAACC,EAAQC,EAAQC,GAGnC,IAFA,IAzDmBC,EAAKC,EAyDpBC,EAAY,GAEPC,EAAON,EAAO,GAAIM,EAAON,EAAO,GAAIM,GAAQJ,EACnDG,EAAUtI,KAAK,CACbwI,KAAMD,EACNE,OA9DeL,EA8DMF,EAAO,GA9DRG,EA8DYH,EAAO,GA7DtCxJ,KAAKmJ,MAAMnJ,KAAKoJ,UAAYO,EAAMD,EAAM,IAAMA,KAiEnD,OAAOE,GApDU,EAuDnBd,UAAY,SAAAkB,GAER,EAAKxK,MAAM7C,MAAQqN,EAAE3D,IAAIhI,KAAO2L,EAAE5D,MAAM/H,KAAO,EAAK4L,aACxC,MACZ,EAAKzC,SAAL,eACK,EAAKhI,MADV,CAEE7C,KAAM,EAAK6C,MAAM7C,MAAQqN,EAAE3D,IAAIhI,KAAO2L,EAAE5D,MAAM/H,KAAO,EAAK4L,gBAE5D,EAAKA,YAAcD,EAAE3D,IAAIhI,KAAO2L,EAAE5D,MAAM/H,OA/DzB,EAmEnB0K,aAAe,SAAAiB,GACb,EAAKC,YAAc,GAjEnB,EAAKzK,MAAQ,CACXrC,cAAe,CAAC,UAAe,YAC/B+M,eAAgB,KAChBjN,SAAU,GACVC,gBAAiB,CAAC,UAAW,UAAW,WACxCR,KAAM,EACNC,KAAM,KAER,EAAKwN,SAAW,IAChB,EAAKF,YAAc,EACnB,EAAKG,aAAe,EAbH,E,iFAiBjB,IAAInN,EAAW,GACXC,EAAkB,GAClBkJ,EAAQiE,IAAO,WACfhE,EAAMgE,IAAO,YAEjBC,QAAQC,IAAIvK,KAAKY,KAAKyJ,IAAOG,SAASnE,EAAIoE,KAAKrE,EAAO,WAEtD,IAAK,IAAIlI,EAAI,EAAGA,EAAIY,KAAKsL,aAAclM,IACrCjB,EAASiB,GAAT,YACKY,KAAKwK,kBACN,CAAC,UAAe,YAChB,CAAC,EAAGxK,KAAKU,MAAM7C,MACf,MAGJO,EAAgBgB,GAAKgL,IAGvBpK,KAAK0I,SAAL,eACK1I,KAAKU,MADV,CAEEvC,SAAUA,EACVC,gBAAiBA,O,+BAiCX,IAAD,EACwD4B,KAAKU,MAA9DvC,EADC,EACDA,SAAUE,EADT,EACSA,cAAeD,EADxB,EACwBA,gBAAiBR,EADzC,EACyCA,KAAMC,EAD/C,EAC+CA,KAatD,OACE,oCACE,yBAAK2D,MAAO,CAAEC,SAAU,WAAYwD,OAAQ,cAC1C,kBAAC,EAAD,CACEzF,MAAO,GACP7B,OAAQ,IACRqM,UAAWhK,KAAKgK,UAChBC,aAAcjK,KAAKiK,aACnBE,OAAQ,gBAGZ,kBAAC,EAAD,CACEhM,SAAUA,EACVE,cAAa,YAAMA,GACnBT,KAAMA,EACNC,KAAMA,EACN2B,MAAO,KACP7B,OAAQ,IACRY,SAAU,OACVC,SAAU,QACVJ,gBAAiBA,EACjB2F,kBAAkB,EAClBtF,QAlCQ,CACZkE,KAAM,CACJsB,gBAAgB,EAChBD,gBAAgB,EAChBtB,kBAAmB,GACnBkJ,aAAc,GAEhBhN,YAAa,CACXC,QAAS,Y,GAlFCuG,iBAmHlByG,IAAS1B,OAAO,kBAAC,EAAD,MAASpJ,SAAS+K,eAAe,W","file":"static/js/main.7c16ab6d.chunk.js","sourcesContent":["//height: canvas px\n// minY: lowest value\n// maxY: highest value\n// dataY: value\nexport function toDomYCoord_Linear(height, minY, maxY, dataY) {\n    return height - (dataY - minY) / ((maxY - minY) / height);\n}\n\nexport function fromDomYCoord_Linear(height, minY, maxY, domY) {\n    return (height - domY) * ((maxY - minY) / height) + minY;\n}\n\nexport function toDomXCoord_Linear(width, minX, maxX, dataX) {\n    return (dataX - minX) / ((maxX - minX) / width);\n}\n\nexport function fromDomXCoord_Linear(width, minX, maxX, domX) {\n    return domX * ((maxX - minX) / width) + minX;\n}","import React, { Component } from \"react\";\nimport isEqual from \"lodash.isequal\";\nimport { toDomYCoord_Linear, toDomXCoord_Linear } from \"./PlottingUtils\";\n\nclass ScatterPlot extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasW = this.props.width;\n    this.canvasH = this.props.height;\n    // {color: canvas}\n    this.dataPointColorCanvasCache = {};\n    this.dotCanvasSize = 6;\n  }\n\n  componentDidMount() {\n    this.scatterPlotCanvas = this.refs.scatterPlotCanvas;\n    this.scatterPlotCtx = this.scatterPlotCanvas.getContext(\"2d\");\n    this.drawScatterPlot(this.scatterPlotCtx);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.drawScatterPlot(this.scatterPlotCtx);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return !isEqual(this.props, nextProps) || this.state !== nextState;\n  }\n\n  drawScatterPlot = ctx => {\n    let {\n      dataSets,\n      dataPointColors,\n      visibleXRange,\n      visibleYRange,\n      xAxisKey,\n      yAxisKey,\n      configs\n    } = this.props;\n\n    if (dataSets === undefined) {\n      return;\n    }\n\n    let dotCanvasSize =\n      configs.plotStyling.dotSize > 0\n        ? configs.plotStyling.dotSize\n        : this.dotCanvasSize;\n\n    ctx.clearRect(0, 0, this.canvasW, this.canvasH);\n    ctx.beginPath();\n    \n    dataSets.forEach((dataSet, i) => {\n      if (dataSet.length > 0) {\n        dataSet.forEach(dataObj => {\n          let domY,\n            domX =\n              toDomXCoord_Linear(\n                this.canvasW,\n                visibleXRange[0],\n                visibleXRange[1],\n                dataObj[xAxisKey]\n              ) -\n              dotCanvasSize / 2;\n\n          let circle = this.getCircle(dataPointColors[i], dotCanvasSize);\n\n          domY =\n            toDomYCoord_Linear(\n              this.canvasH,\n              visibleYRange[0],\n              visibleYRange[1],\n              dataObj[yAxisKey]\n            ) -\n            dotCanvasSize / 2;\n\n          ctx.drawImage(circle, domX, domY);\n        });\n      }\n    });\n  };\n\n  getCircle(color, size = 6) {\n    let cachedDataPointColorCanvas = this.dataPointColorCanvasCache[\n      color + size\n    ];\n\n    if (cachedDataPointColorCanvas === undefined) {\n      let canvas = document.createElement(\"canvas\");\n      canvas.width = size;\n      canvas.height = size;\n      let ctx = canvas.getContext(\"2d\");\n      ctx.arc(size / 2, size / 2, size / 3, 0, 2 * Math.PI);\n      ctx.fillStyle = color;\n      ctx.fill();\n      cachedDataPointColorCanvas = canvas;\n    }\n    return cachedDataPointColorCanvas;\n  }\n\n  render() {\n    const styles = {\n      scatterPlotCanvas: {\n        position: \"absolute\"\n      }\n    };\n\n    return (\n      <canvas\n        className=\"scatter-plot-canvas\"\n        ref=\"scatterPlotCanvas\"\n        width={this.canvasW}\n        height={this.canvasH}\n        style={styles.scatterPlotCanvas}\n      />\n    );\n  }\n}\n\nexport default ScatterPlot;\n","import React, { Component } from \"react\";\nimport { toDomYCoord_Linear, toDomXCoord_Linear } from \"./PlottingUtils\";\nimport isEqual from \"lodash.isequal\";\n\nfunction round5(x) {\n  return Math.round(Math.ceil(x / 5) * 5);\n}\n\nfunction round2(x) {\n  return Math.round(Math.ceil(x / 2) * 2);\n}\n\nclass YAxis extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasW = this.props.canvasW;\n    this.canvasH = this.props.canvasH;\n    this.minY = this.props.minY;\n    this.maxY = this.props.maxY;\n  }\n\n  componentDidMount() {\n    this.yAxisCanvas = this.refs.yAxisCanvas;\n    this.yAxisCtx = this.yAxisCanvas.getContext(\"2d\");\n    this.drawYAxis(this.yAxisCtx);\n  }\n\n  componentDidUpdate() {\n    this.minY = this.props.minY;\n    this.maxY = this.props.maxY;\n    this.drawYAxis(this.yAxisCtx);\n  }\n\n  toDomYCoord_Linear = (height, minY, maxY, dataY) => {\n    return height - (dataY - minY) / ((maxY - minY) / height);\n  };\n\n  generateYAxisLabels = (\n    minY,\n    maxY,\n    height,\n    labelPadding = 20,\n    labelTextHeight\n  ) => {\n    let yAxisLabels = [];\n    let numOfLabelsCanFit = Math.round(\n      height / (labelTextHeight + labelPadding)\n    );\n    let yAxisSpan = round5(maxY - minY);\n    let yAxisLabelInterval = round5(yAxisSpan / numOfLabelsCanFit);\n\n    // negative labels\n    for (\n      let curYAxisLabel = -yAxisLabelInterval;\n      curYAxisLabel > round5(minY);\n      curYAxisLabel -= yAxisLabelInterval\n    ) {\n      yAxisLabels.push(curYAxisLabel);\n    }\n\n    // positive labels\n    for (\n      let curYAxisLabel = 0;\n      curYAxisLabel < round5(maxY);\n      curYAxisLabel += yAxisLabelInterval\n    ) {\n      yAxisLabels.push(curYAxisLabel);\n    }\n\n    return yAxisLabels;\n  };\n\n  drawYAxis = ctx => {\n    let textXPadding = 10;\n    let yAxisHorizontalLineWidth = 5;\n    let yAxisLabelPadding = this.props.configs.axis.yAxisLabelPadding;\n    let yAxisLabels = this.generateYAxisLabels(\n      this.minY,\n      this.maxY,\n      this.canvasH,\n      yAxisLabelPadding,\n      20\n    );\n\n    // clear canvas\n    ctx.clearRect(0, 0, this.canvasW, this.canvasH);\n    ctx.beginPath();\n\n    // y-axis vertical line styling\n    ctx.strokeStyle = \"black\";\n    ctx.lineWidth = 2.5;\n    // text styling\n    ctx.font = \"500 13px Museo Sans, sans-serif\";\n    ctx.lineWidth = 0.6;\n    ctx.textBaseline = \"middle\";\n    ctx.textAlign = \"right\";\n    ctx.fillStyle = \"gray\";\n\n    // draw the y-axis vertical line\n    ctx.moveTo(this.canvasW, 5);\n    ctx.lineTo(this.canvasW, this.canvasH - 5);\n    ctx.stroke();\n\n    // draw the labels and horizontal lines\n    yAxisLabels.forEach(yAxisLabel => {\n      let domY = this.toDomYCoord_Linear(\n        this.canvasH,\n        this.minY,\n        this.maxY,\n        yAxisLabel\n      );\n      ctx.moveTo(this.canvasW - yAxisHorizontalLineWidth, domY);\n      ctx.lineTo(this.canvasW, domY);\n      ctx.fillText(yAxisLabel, this.canvasW - textXPadding, domY);\n    });\n\n    ctx.stroke();\n  };\n\n  roundToNearestTenth(n) {\n    return (parseInt(n / 10, 10) + 1) * 10;\n  }\n\n  render() {\n    // width, height, data from props\n    // reserve className for parent\n    return (\n      <canvas\n        className=\"plot-y-axis\"\n        ref=\"yAxisCanvas\"\n        width={this.canvasW}\n        height={this.canvasH}\n      />\n    );\n  }\n}\n\nexport default YAxis;\n","import React, { Component } from \"react\";\nimport { toDomYCoord_Linear, toDomXCoord_Linear } from \"./PlottingUtils\";\nimport isEqual from \"lodash.isequal\";\n\nfunction round5(x) {\n  return Math.round(Math.ceil(x / 5) * 5);\n}\n\nfunction round2(x) {\n  return Math.round(Math.ceil(x / 2) * 2);\n}\n\nclass PlotAxisGrid extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasW = this.props.canvasW;\n    this.canvasH = this.props.canvasH;\n    this.minY = this.props.minY;\n    this.maxY = this.props.maxY;\n  }\n\n  componentDidMount() {\n    this.plotAxisGridCanvas = this.refs.plotAxisGridCanvas;\n    this.plotAxisGridCtx = this.plotAxisGridCanvas.getContext(\"2d\");\n    this.drawYAxisGrid(this.plotAxisGridCtx);\n  }\n\n  componentDidUpdate() {\n    this.minY = this.props.minY;\n    this.maxY = this.props.maxY;\n    this.drawYAxisGrid(this.plotAxisGridCtx);\n  }\n\n  generateYAxisLabels = (minY, maxY, height, labelPadding, labelTextHeight) => {\n    let yAxisLabels = [];\n    let numOfLabelsCanFit = Math.round(\n      height / (labelTextHeight + labelPadding)\n    );\n    let yAxisSpan = round5(maxY - minY);\n    let yAxisLabelInterval = round5(yAxisSpan / numOfLabelsCanFit);\n\n    // negative labels\n    for (\n      let curYAxisLabel = -yAxisLabelInterval;\n      curYAxisLabel > round5(minY);\n      curYAxisLabel -= yAxisLabelInterval\n    ) {\n      yAxisLabels.push(curYAxisLabel);\n    }\n\n    // positive labels\n    for (\n      let curYAxisLabel = 0;\n      curYAxisLabel < round5(maxY);\n      curYAxisLabel += yAxisLabelInterval\n    ) {\n      yAxisLabels.push(curYAxisLabel);\n    }\n\n    return yAxisLabels;\n  };\n\n  drawYAxisGrid = ctx => {\n    let yAxisLabels = this.generateYAxisLabels(\n      this.minY,\n      this.maxY,\n      this.canvasH,\n      20,\n      20\n    );\n\n    // clear canvas\n    ctx.clearRect(0, 0, this.canvasW, this.canvasH);\n    ctx.beginPath()\n    // y-axis vertical line styling\n    ctx.strokeStyle = \"rgba(211,211,211, 0.6)\";\n    ctx.lineWidth = 1;\n\n    // draw the labels and horizontal lines\n    yAxisLabels.forEach(yAxisLabel => {\n      let domY = toDomYCoord_Linear(\n        this.canvasH,\n        this.minY,\n        this.maxY,\n        yAxisLabel\n      );\n      ctx.moveTo(0, domY);\n      ctx.lineTo(this.canvasW, domY);\n    });\n\n    ctx.stroke();\n  };\n\n  roundToNearestTenth(n) {\n    return (parseInt(n / 10, 10) + 1) * 10;\n  }\n\n  render() {\n    // width, height, data from props\n    // reserve className for parent\n    return (\n      <canvas\n        className=\"plot-axis-grid\"\n        ref=\"plotAxisGridCanvas\"\n        width={this.canvasW}\n        height={this.canvasH}\n      />\n    );\n  }\n}\n\nexport default PlotAxisGrid;\n","import ScatterPlotBundle from \"./ScatterPlotBundle\";\nexport default ScatterPlotBundle;","import React, { Component } from \"react\";\nimport isEqual from \"lodash.isequal\";\nimport ScatterPlot from \"./ScatterPlot\";\nimport YAxis from \"./YAxis\";\nimport PlotAxisGrid from \"./PlotAxisGrid\";\n\nfunction round5(x) {\n  return Math.ceil(x / 5) * 5;\n}\n\nclass ScatterPlotBundle extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return !isEqual(this.props, nextProps) || this.state !== nextState;\n  }\n\n  render() {\n    const {\n      dataSets,\n      dataPointColors,\n      width,\n      height,\n      minY,\n      maxY,\n      xAxisKey,\n      yAxisKey,\n      configs,\n      isRenderPlotOnly\n    } = this.props;\n\n    if (dataSets.length < 1 || dataSets === undefined) {\n      return null;\n    }\n\n    let { isDynamicXAxis, isDynamicYAxis, yAxisPadding } = configs.axis;\n    let dotSize = configs.plotStyling.dotSize;\n    let visibleYRange = [Number.MAX_VALUE, Number.MIN_VALUE];\n    let visibleXRange = isDynamicXAxis\n      ? this.props.visibleXRange\n      : [Number.MAX_VALUE, Number.MIN_VALUE];\n    let visibleYRangeDistance = 0;\n    let filteredDataSets = [];\n    let plotWidth = 1200;\n    let yAxisPanelWidth = 40;\n\n    dataSets.forEach((dataSet, i) => {\n      filteredDataSets[i] = dataSet.filter(dataObj => {\n        if (!isDynamicXAxis) {\n          if (dataObj[xAxisKey] < visibleXRange[0]) {\n            visibleXRange[0] = dataObj[xAxisKey];\n          } else if (dataObj[xAxisKey] > visibleXRange[1]) {\n            visibleXRange[1] = dataObj[xAxisKey];\n          }\n        }\n\n        if (isDynamicYAxis) {\n          if (\n            dataObj[xAxisKey] >= visibleXRange[0] &&\n            dataObj[xAxisKey] <= visibleXRange[1]\n          ) {\n            if (dataObj[yAxisKey] < visibleYRange[0]) {\n              visibleYRange[0] = dataObj[yAxisKey];\n            } else if (dataObj[yAxisKey] > visibleYRange[1]) {\n              visibleYRange[1] = dataObj[yAxisKey];\n            }\n          }\n        } else {\n          if (dataObj[yAxisKey] < visibleYRange[0]) {\n            visibleYRange[0] = dataObj[yAxisKey];\n          } else if (dataObj[yAxisKey] > visibleYRange[1]) {\n            visibleYRange[1] = dataObj[yAxisKey];\n          }\n        }\n\n        return (\n          dataObj[xAxisKey] >= visibleXRange[0] &&\n          dataObj[xAxisKey] <= visibleXRange[1]\n        );\n      });\n    });\n\n    visibleYRangeDistance = round5(visibleYRange[1] - visibleYRange[0]);\n    visibleYRange[0] -=\n      yAxisPadding > 0 ? yAxisPadding : visibleYRangeDistance * 0.1; // TODO: figure out y padding\n    visibleYRange[1] +=\n      yAxisPadding > 0 ? yAxisPadding : visibleYRangeDistance * 0.1;\n\n    if (!isRenderPlotOnly) {\n      visibleYRange = maxY !== null ? [minY, maxY] : visibleYRange;\n      return (\n        <table className=\"chart-table\" style={{ borderCollapse: \"collapse\" }}>\n          <tbody>\n            <tr className=\"chart-table-row\">\n              <td\n                className=\"chart-table-col\"\n                style={{ width: yAxisPanelWidth }}\n              >\n                {\" \"}\n                <YAxis\n                  canvasW={yAxisPanelWidth}\n                  canvasH={height}\n                  minY={visibleYRange[0]}\n                  maxY={visibleYRange[1]}\n                  configs={configs}\n                />\n              </td>\n              <td className=\"chart-table-col\" style={{ width: plotWidth }}>\n                {\" \"}\n                <div style={{ position: \"absolute\" }}>\n                  <PlotAxisGrid\n                    canvasW={plotWidth}\n                    canvasH={height}\n                    minY={visibleYRange[0]}\n                    maxY={visibleYRange[1]}\n                    configs={configs}\n                  />\n                </div>\n                <div style={{ position: \"absolute\" }}>\n                  <ScatterPlot\n                    dataSets={filteredDataSets}\n                    dataPointColors={dataPointColors}\n                    visibleXRange={visibleXRange}\n                    visibleYRange={visibleYRange}\n                    width={width}\n                    height={height}\n                    xAxisKey={xAxisKey}\n                    yAxisKey={yAxisKey}\n                    configs={configs}\n                  />\n                </div>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      );\n    }\n\n    return (\n      <ScatterPlot\n        dataSets={filteredDataSets}\n        dataPointColors={dataPointColors}\n        visibleXRange={visibleXRange}\n        visibleYRange={maxY !== null ? [minY, maxY] : visibleYRange}\n        width={width}\n        height={height}\n        xAxisKey={xAxisKey}\n        yAxisKey={yAxisKey}\n        configs={configs}\n      />\n    );\n  }\n}\n\nexport default ScatterPlotBundle;\n","import React, { PureComponent } from \"react\"\nimport PropTypes from 'prop-types'\n// CSS\nimport \"./DragOverlay.css\"\n\nclass DragOverlay extends PureComponent {\n  render() {\n    let { cursor} = this.props\n    return <div className=\"fullscreen\" style={{cursor:cursor}}></div>\n  }\n\n  componentDidMount(){\n    document.addEventListener(\"mousemove\",this.handleMouseMove,true)\n    document.addEventListener(\"mouseup\",this.handleMouseUp,true)\n  }\n\n  componentWillUnmount(){\n    document.removeEventListener(\"mousemove\",this.handleMouseMove,true)\n    document.removeEventListener(\"mouseup\",this.handleMouseUp,true)\n  }\n  \n  handleMouseMove = (ev)=>{\n    ev.stopPropagation()\n    let {mouseMoveHandler} = this.props\n    mouseMoveHandler(ev)\n  }\n\n  handleMouseUp = (ev)=>{\n    ev.stopPropagation()\n    let {mouseUpHandler} = this.props\n    mouseUpHandler(ev)\n  }\n}\n\n\nDragOverlay.propTypes = {\n  cursor: PropTypes.string.isRequired,\n  mouseMoveHandler: PropTypes.func.isRequired,\n  mouseUpHandler: PropTypes.func.isRequired\n}\n\nexport default DragOverlay\n","import {PureComponent} from \"react\"\n\nclass CountDown extends PureComponent{\n  render(){\n    return null\n  }\n  \n  componentDidMount(){\n    let {timeout,callback} = this.props\n    this.timeout = setTimeout(callback,timeout)\n  }\n\n  componentDidUpdate(){\n    clearTimeout(this.timeout)\n    let {timeout,callback} = this.props\n    this.timeout = setTimeout(callback,timeout)\n  }\n\n  componentWillUnmount(){\n    clearTimeout(this.timeout)\n  }\n}\n\nexport default CountDown\n","import React, { PureComponent } from \"react\";\n// Components\nimport DragOverlay from \"./DragOverlay\";\nimport CountDown from \"./CountDown\";\n\n// CSS\nimport \"./PlotInteractionBox.css\";\n\nexport const MODE_HOVERING = \"hovering\";\nexport const MODE_CLICKING = \"clicking\";\nexport const MODE_AUTOSELECTING = \"autoSelecting\";\nexport const MODE_SELECTING = \"selecting\";\nexport const MODE_PANNING = \"panning\";\n\nexport const ACTION_MOUSEDOWN = \"mouseDown\";\nexport const ACTION_MOUSEMOVE = \"mouseMove\";\nexport const ACTION_MOUSEUP = \"mouseUp\";\nexport const ACTION_TIMEOUT = \"timeout\";\n\nexport const INTERACTION_MODEL_DEFAULT = {\n  [MODE_HOVERING]: { [ACTION_MOUSEDOWN]: MODE_CLICKING },\n  [MODE_CLICKING]: {\n    [ACTION_TIMEOUT]: MODE_AUTOSELECTING,\n    [ACTION_MOUSEMOVE]: MODE_SELECTING,\n    [ACTION_MOUSEUP]: MODE_HOVERING\n  },\n  [MODE_AUTOSELECTING]: {\n    [ACTION_TIMEOUT]: MODE_PANNING,\n    [ACTION_MOUSEMOVE]: MODE_SELECTING\n  },\n  [MODE_SELECTING]: { [ACTION_MOUSEUP]: MODE_HOVERING },\n  [MODE_PANNING]: { [ACTION_MOUSEUP]: MODE_HOVERING }\n};\n\nexport const INTERACTION_MODEL_SELECTING = {\n  [MODE_HOVERING]: { [ACTION_MOUSEDOWN]: MODE_CLICKING },\n  [MODE_CLICKING]: {\n    [ACTION_TIMEOUT]: MODE_SELECTING,\n    [ACTION_MOUSEMOVE]: MODE_SELECTING,\n    [ACTION_MOUSEUP]: MODE_HOVERING\n  },\n  [MODE_SELECTING]: { [ACTION_MOUSEUP]: MODE_HOVERING }\n};\n\nexport const INTERACTION_MODEL_PANNING = {\n  [MODE_HOVERING]: { [ACTION_MOUSEDOWN]: MODE_CLICKING },\n  [MODE_CLICKING]: {\n    [ACTION_TIMEOUT]: MODE_PANNING,\n    [ACTION_MOUSEMOVE]: MODE_PANNING,\n    [ACTION_MOUSEUP]: MODE_HOVERING\n  },\n  [MODE_PANNING]: { [ACTION_MOUSEUP]: MODE_HOVERING }\n};\n\nexport const INTERACTION_MODEL_BARE = {\n  [MODE_HOVERING]: { [ACTION_MOUSEDOWN]: MODE_CLICKING },\n  [MODE_CLICKING]: { [ACTION_MOUSEUP]: MODE_HOVERING }\n};\n\nclass PlotInteractionBox extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = { mode: MODE_HOVERING };\n    this.ref = React.createRef();\n    this.initialMouseDownPosition = null;\n    this.prevClickTimeStamp = null;\n  }\n\n  render() {\n    let { width, height, children } = this.props;\n    let style = { width, height };\n    \n    switch (this.state.mode) {\n      case MODE_HOVERING:\n        return (\n          <div>\n            <div\n              ref={this.ref}\n              style={style}\n              onMouseMove={this.handleMouseMove_Hovering}\n              onMouseOut={this.handleMouseOut_Hovering}\n              onMouseDown={this.handleMouseDown_Hovering}\n            >\n              {children}\n            </div>\n          </div>\n        );\n      case MODE_CLICKING:\n        return (\n          <>\n            <div ref={this.ref} style={style}>\n              {children}\n            </div>\n            <DragOverlay\n              mouseMoveHandler={this.handleMouseMove_Clicking}\n              mouseUpHandler={this.handleMouseUp_Clicking}\n              cursor=\"point\"\n            />\n            <CountDown timeout={200} callback={this.clickTimeout} />\n          </>\n        );\n      case MODE_AUTOSELECTING:\n        return (\n          <>\n            <div ref={this.ref} style={style}>\n              {children}\n            </div>\n            <DragOverlay\n              mouseMoveHandler={this.handleMouseMove_AutoSelecting}\n              mouseUpHandler={this.handleMouseUp_AutoSelecting}\n              cursor=\"nesw-resize\"\n            />\n            <CountDown timeout={500} callback={this.autoSelectingTimeout} />\n          </>\n        );\n      case MODE_SELECTING:\n        return (\n          <>\n            <div ref={this.ref} style={style}>\n              {children}\n            </div>\n            <DragOverlay\n              mouseMoveHandler={this.handleMouseMove_Selecting}\n              mouseUpHandler={this.handleMouseUp_Selecting}\n              cursor=\"nesw-resize\"\n            />\n          </>\n        );\n      case MODE_PANNING:\n        return (\n          <>\n            <div ref={this.ref} style={style}>\n              {children}\n            </div>\n            <DragOverlay\n              mouseMoveHandler={this.handleMouseMove_Panning}\n              mouseUpHandler={this.handleMouseUp_Panning}\n              cursor=\"grabbing\"\n            />\n          </>\n        );\n      default:\n        return <p>{this.state.mode}</p>;\n      //throw new Error(\"ProgrammerTooDumbError\");\n    }\n  }\n\n  transition(action) {\n    let { transitionGraph } = this.props;\n    let { mode } = this.state;\n    let nextMode = transitionGraph[mode][action];\n    if (nextMode) {\n      this.setState({ mode: nextMode });\n    }\n  }\n\n  getCustomEventObject(ev) {\n    let { left, top } = this.ref.current.getBoundingClientRect();\n    let { clientX, clientY } = ev;\n    let domX = clientX - left;\n    let domY = clientY - top;\n    return { domX, domY, clientX, clientY };\n  }\n\n  handleMouseMove_Hovering = ev => {\n    let { hoveringHandler } = this.props;\n    let myEV = this.getCustomEventObject(ev);\n    hoveringHandler(myEV);\n  };\n\n  handleMouseOut_Hovering = ev => {\n    let { hoverEndHandler } = this.props;\n    hoverEndHandler();\n  };\n\n  handleMouseDown_Hovering = ev => {\n    let { hoverEndHandler } = this.props;\n    ev.preventDefault();\n    let myEV = this.getCustomEventObject(ev);\n    this.initialMouseDownPosition = myEV;\n    hoverEndHandler();\n    this.transition(ACTION_MOUSEDOWN);\n  };\n\n  clickTimeout = () => {\n    this.transition(ACTION_TIMEOUT);\n  };\n\n  autoSelectingTimeout = () => {\n    this.transition(ACTION_TIMEOUT);\n  };\n\n  handleMouseMove_Clicking = ev => {\n    let { selectingHandler } = this.props;\n    let { initialMouseDownPosition } = this;\n    let myEV = this.getCustomEventObject(ev);\n    if (\n      Math.abs(myEV.domX - initialMouseDownPosition.domX) < 10 ||\n      Math.abs(myEV.domY - initialMouseDownPosition.domX) < 10\n    ) {\n      return;\n    } else {\n      this.transition(ACTION_MOUSEMOVE);\n    }\n  };\n\n  handleMouseUp_Clicking = ev => {\n    let { clickHandler, doubleClickHandler } = this.props;\n    let { prevClickTimeStamp } = this;\n    let myEV = this.getCustomEventObject(ev);\n    if (\n      prevClickTimeStamp === null ||\n      prevClickTimeStamp + 200 < ev.timeStamp\n    ) {\n      this.prevClickTimeStamp = ev.timeStamp;\n      clickHandler(myEV);\n    } else {\n      this.prevClickTimeStamp = null;\n      doubleClickHandler(myEV);\n    }\n    this.transition(ACTION_MOUSEUP);\n  };\n\n  handleMouseMove_AutoSelecting = ev => {\n    let { selectingHandler } = this.props;\n    let { initialMouseDownPosition } = this;\n    let myEV = this.getCustomEventObject(ev);\n    if (\n      Math.abs(myEV.domX - initialMouseDownPosition.domX) < 10 ||\n      Math.abs(myEV.domY - initialMouseDownPosition.domX) < 10\n    ) {\n      return;\n    } else {\n      selectingHandler({ start: initialMouseDownPosition, end: myEV });\n      this.transition(ACTION_MOUSEMOVE);\n    }\n  };\n\n  handleMouseUp_AutoSelecting = ev => {\n    this.transition(ACTION_MOUSEUP);\n  };\n\n  handleMouseMove_Selecting = ev => {\n    let { selectingHandler } = this.props;\n    let { initialMouseDownPosition } = this;\n    let myEV = this.getCustomEventObject(ev);\n    selectingHandler({ start: initialMouseDownPosition, end: myEV });\n  };\n\n  handleMouseUp_Selecting = ev => {\n    let { selectedHandler } = this.props;\n    let { initialMouseDownPosition } = this;\n    let myEV = this.getCustomEventObject(ev);\n    selectedHandler({ start: initialMouseDownPosition, end: myEV });\n    this.transition(ACTION_MOUSEUP);\n  };\n\n  handleMouseMove_Panning = ev => {\n    let { panningHandler } = this.props;\n    let { initialMouseDownPosition } = this;\n    let myEV = this.getCustomEventObject(ev);\n    panningHandler({ start: initialMouseDownPosition, end: myEV });\n  };\n\n  handleMouseUp_Panning = ev => {\n    let { pannedHandler } = this.props;\n    let { initialMouseDownPosition } = this;\n    let myEV = this.getCustomEventObject(ev);\n    pannedHandler({ start: initialMouseDownPosition, end: myEV });\n    this.transition(ACTION_MOUSEUP);\n  };\n}\n\nexport default PlotInteractionBox;\n","import React, { Component } from \"react\";\nimport PlotInteractionBox, {\n  INTERACTION_MODEL_PANNING\n} from \"./PlotInteractionBox\";\n\nclass PlotInteractionBoxProvider extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hoveringPosition: null,\n      clickPosition: null,\n      doubleClickPosition: null,\n      selectingPositions: null,\n      selectedPositions: null,\n      panningPositions: null,\n      pannedPositions: null\n    };\n  }\n\n  render() {\n    let { render, width, height } = this.props;\n    return (\n      <PlotInteractionBox\n        width={width}\n        height={height}\n        transitionGraph={INTERACTION_MODEL_PANNING}\n        hoveringHandler={this.handleHovering}\n        hoverEndHandler={this.handleHoverEnd}\n        clickHandler={this.handleClick}\n        doubleClickHandler={this.handleDoubleClick}\n        selectingHandler={this.handleSelecting}\n        selectedHandler={this.handleSelected}\n        panningHandler={this.handlePanning}\n        pannedHandler={this.handlePanned}\n      >\n        {render(this.state)}\n      </PlotInteractionBox>\n    );\n  }\n\n  handleHovering = hoveringPosition => {\n    this.setState({ ...this.state, hoveringPosition });\n    if (this.props.handleHoverPosChange) {\n      this.props.handleHoverPosChange(hoveringPosition);\n    }\n  };\n\n  handleHoverEnd = () => {\n    this.setState({ ...this.state, hoveringPosition: null });\n    if (this.props.handleHoverPosChange) {\n      this.props.handleHoverPosChange(null);\n    }\n  };\n\n  handleClick = clickPosition => {\n    this.setState({\n      ...this.state,\n      clickPosition\n    });\n    if (this.props.handleClick) {\n      this.props.handleClick();\n    }\n  };\n\n  handleDoubleClick = doubleClickPosition => {\n    this.setState({ ...this.state, doubleClickPosition });\n  };\n\n  handleSelecting = selectingPositions => {\n    this.setState({ ...this.state, selectingPositions });\n  };\n\n  handleSelected = selectedPositions => {\n    this.setState({\n      ...this.state,\n      selectedPositions,\n      selectingPositions: null\n    });\n  };\n\n  handlePanning = panningPositions => {\n    this.setState({ ...this.state, panningPositions });\n    if (this.props.handlePan) {\n      this.props.handlePan(panningPositions);\n    }\n  };\n\n  handlePanned = pannedPositions => {\n    this.setState({ ...this.state, pannedPositions, panningPositions: null });\n    if (this.props.handlePanned) {\n      this.props.handlePanned(pannedPositions)\n    }\n  };\n}\n\nexport default PlotInteractionBoxProvider;\n","import React, { PureComponent } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ScatterPlotBundle from \"./lib\";\nimport PlotInteractionBoxProvider from \"./lib/PlotInteraction/PlotInteractionBoxProvider\";\nimport moment from \"moment\";\nimport \"./index.css\";\n\nfunction randomInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getRandomColor() {\n  var letters = \"0123456789ABCDEF\";\n  var color = \"#\";\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\nclass App extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      visibleXRange: [1513058000000, 1513695600000],\n      currentOverlay: null,\n      dataSets: [],\n      dataPointColors: [\"#d50000\", \"#ff6d00\", \"#546e7a\"],\n      minY: 0,\n      maxY: 200\n    };\n    this.prevMaxY = 200;\n    this.prevPanDist = 0;\n    this.dataSetCount = 4;\n  }\n\n  componentDidMount() {\n    let dataSets = [];\n    let dataPointColors = [];\n    let start = moment(1482858000000);\n    let end = moment(1513695600000);\n\n    console.log(Math.ceil(moment.duration(end.diff(start, \"days\"))));\n\n    for (let i = 0; i < this.dataSetCount; i++) {\n      dataSets[i] = [\n        ...this.generateDummyData(\n          [1482858000000, 1513695600000],\n          [1, this.state.maxY],\n          100000000\n        )\n      ];\n      dataPointColors[i] = getRandomColor();\n    }\n\n    this.setState({\n      ...this.state,\n      dataSets: dataSets,\n      dataPointColors: dataPointColors\n    });\n  }\n\n  generateDummyData = (xRange, yRange, dataFreq) => {\n    let dummyData = [];\n\n    for (let curX = xRange[0]; curX < xRange[1]; curX += dataFreq) {\n      dummyData.push({\n        time: curX,\n        value: randomInteger(yRange[0], yRange[1])\n      });\n    }\n\n    return dummyData;\n  };\n\n  handlePan = e => {\n    let newMaxY =\n      this.state.maxY + (e.end.domY - e.start.domY - this.prevPanDist);\n    if (newMaxY > 150) {\n      this.setState({\n        ...this.state,\n        maxY: this.state.maxY + (e.end.domY - e.start.domY - this.prevPanDist)\n      });\n      this.prevPanDist = e.end.domY - e.start.domY;\n    }\n  };\n\n  handlePanned = e => {\n    this.prevPanDist = 0;\n  };\n\n  render() {\n    let { dataSets, visibleXRange, dataPointColors, minY, maxY } = this.state;\n    let configs = {\n      axis: {\n        isDynamicYAxis: true, // dynamic y axis = scale y axis according to current visible dataSets points\n        isDynamicXAxis: true, // dynamic x axis = use x axis passed in by the plot user\n        yAxisLabelPadding: 20,\n        xAxisPadding: 0\n      },\n      plotStyling: {\n        dotSize: 20\n      }\n    };\n \n    return (\n      <>\n        <div style={{ position: \"absolute\", cursor: \"ns-resize\" }}>\n          <PlotInteractionBoxProvider\n            width={40}\n            height={400}\n            handlePan={this.handlePan}\n            handlePanned={this.handlePanned}\n            render={() => {}}\n          />\n        </div>\n        <ScatterPlotBundle\n          dataSets={dataSets}\n          visibleXRange={[...visibleXRange]}\n          minY={minY}\n          maxY={maxY}\n          width={1200}\n          height={400}\n          xAxisKey={\"time\"}\n          yAxisKey={\"value\"}\n          dataPointColors={dataPointColors}\n          isRenderPlotOnly={false}\n          configs={configs}\n        />\n      </>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}